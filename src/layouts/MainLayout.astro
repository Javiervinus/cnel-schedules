---
import Appbar from "@/components/Appbar.astro";
import Footer from "@/components/Footer.astro";
import BaseHead from "@/components/BaseHead.astro";
import { Toaster } from "@/components/ui/sonner";
import "@/styles/globals.css";
import { ViewTransitions } from "astro:transitions";



const { title, description, image, articleDate,articleAuthor,isHome } = Astro.props
---

<!doctype html>
<html lang="es-EC">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="Content-Language" content="es-EC" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <BaseHead
    title={title}
    description={description}
    ogImage={image}
    articleDate={articleDate}
    articleAuthor={articleAuthor}
    isHome={isHome}

    ></BaseHead>

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta
      name="google-site-verification"
      content={import.meta.env.GOOGLE_SITE_VERIFICATION}
    />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <!-- <script is:inline type="module" src="../scripts/appbar2.js"></script> -->

    {
      import.meta.env.PROD && (
        <script
          defer
          type="text/partytown"
          src="https://cloud.umami.is/script.js"
          data-website-id={import.meta.env.UMAMI_ID}
        />
        <script type="text/javascript">
          (function (c, l, a, r, i, t, y) {
            c[a] =
              c[a] ||
              function () {
                (c[a].q = c[a].q || []).push(arguments);
              };
            t = l.createElement(r);
            t.async = 1;
            t.src = "https://www.clarity.ms/tag/" + i;
            y = l.getElementsByTagName(r)[0];
            y.parentNode.insertBefore(t, y);
          })(window, document, "clarity", "script", "olchg88tpg");
      </script>
      )
    }

    <ViewTransitions />
  </head>
  <body class="relative">
    <section class="relative flex flex-col min-h-screen bg-background">
      <Appbar />

      <main class="flex flex-1 ">
        <slot />
      </main>

      <Footer />
    </section>
    <Toaster client:load />

  </body>
</html>
<style is:global>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
  }


  input,
  textarea,
  select {
    font-size: 16px !important;
  }
  html {
    -webkit-text-size-adjust: 100%;
  }
</style>
<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "WebSite",
    "name": "Horarios CNEL",
    "url": "https://cnel-schedules.vercel.app/",
    "description": "Consulta los horarios actualizados de cortes de luz de CNEL en Ecuador.",
    "inLanguage": "es-EC",
    "author": {
      "@type": "Person",
      "name": "Javier Vinueza",
      "url": "https://github.com/Javiervinus",
      "sameAs": ["https://www.linkedin.com/in/javier-vinueza-08759a74"]
    },
    "publisher": {
      "@type": "Organization",
      "name": "Horarios CNEL",
      "url": "https://cnel-schedules.vercel.app/",
      "address": {
        "@type": "PostalAddress",
        "addressCountry": "EC"
      }
    }
  }
</script>
<script is:inline>
  // Función para aplicar la preferencia de tema (oscuro o claro) a un documento específico
  const applyThemePreference = (doc) => {
    let theme = localStorage.getItem("theme") || "light"; // Obtener la preferencia del tema
    const isDark = theme === "dark";
    doc.documentElement.classList[isDark ? "add" : "remove"]("dark"); // Aplicar el tema
  };

  // Aplicar el tema al documento actual cuando la página se carga inicialmente
  applyThemePreference(document);

  // Observar cambios en la clase del documento para actualizar la preferencia en localStorage
  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"], // Solo observar cambios en la clase
    });
  }

  // Antes de que ocurra el intercambio de documentos, aplicar el tema al nuevo documento
  document.addEventListener("astro:before-swap", (event) => {
    applyThemePreference(event.newDocument); // Aplicar el tema al nuevo documento
  });
</script>
<script is:inline>
  const CloneMode = {
    CLONE_NODE: 0, // Clonar el nodo completo (por defecto)
    INNER_HTML: 1, // Usar innerHTML
    TEXT_CONTENT: 2, // Usar textContent
  };

  const defaultOptions = {
    titleId: "page-title",
    appBarTitleId: "appbar-title",
    cloneMode: CloneMode.CLONE_NODE,
    removeLeadingIcons: true,
    maxFontSize: 18,
    appBarHeight: 56,
  };
</script>
<!-- {
  import.meta.env.NODE_ENV === "development" ? (
    <script
      is:inline
      src="https://vercel.live/_next-live/feedback/feedback.js"
      data-explicit-opt-in="true"
      data-owner-id={import.meta.env.VERCEL_LIVE_OWNER_ID}
      data-project-id={import.meta.env.VERCEL_LIVE_PROJECT_ID}
      data-branch="develop"
    />
  ) : null
} -->
