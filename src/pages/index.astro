---
interface Cautions {
  icon: string;
  class: string;
  text: string;
}

import FormSchedule from "@/components/FormSchedule";
import { Icon } from "astro-icon/components";

import MainLayout from "@/layouts/MainLayout.astro";
import PowerSwitch from "@/icons/PowerSwitch.astro";
import BatteryCharge from "@/icons/BatteryCharge.astro";
import Planner from "@/icons/Planner.astro";
import EmojiLightbulb from "@/icons/EmojiLightbulb.astro";
import MdiClockOutline from "@/icons/MdiClockOutline.astro";
const cautions: Cautions[] = [
  {
    icon: "PowerSwitch",
    class: "w-7 h-7",
    text: "Desconecta lo que no necesitas",
  },
  {
    icon: "BatteryCharge",
    class: "w-7 h-7 text-green-500",
    text: "Carga tus dispositivos",
  },
  {
    icon: "Planner",
    class: "w-7 h-7",
    text: "Ajusta tu rutina al horario",
  },
  {
    icon: "Lightbulb",
    class: "w-7 h-7",
    text: "Iluminación a la mano",
  },
  // Revisa el horario del corte
  {
    icon: "Clock",
    class: "w-7 h-7 text-[#2364B0]",
    text: "Revisa el horario del corte",
  },
];

const getIconComponent = (icon: string) => {
  switch (icon) {
    case "PowerSwitch":
      return PowerSwitch;
    case "BatteryCharge":
      return BatteryCharge;
    case "Planner":
      return Planner;
    case "Lightbulb":
      return EmojiLightbulb;
    case "Clock":
      return MdiClockOutline;
    default:
      return null;
  }
};
---

<MainLayout title="Horarios CNEL - Cortes de Luz Ecuador">
  <div class="grid grid-cols-12 flex-1">
    <!-- Sección Izquierda -->
    <section class="hidden lg:flex lg:col-span-1 overflow-auto justify-start">
    </section>

    <!-- Contenido Central -->
    <div class="col-span-12 lg:col-span-10 px-6 pt-0 py-4">
      <div class="max-w-screen-lg mx-auto h-full">
        <div
          class="flex flex-col h-full items-center justify-start md:justify-center gap-6"
        >
          <section class="w-full text-center flex flex-col items-center">
            <h1 id="page-title" class="text-4xl text-start mb-3 font-bold">
              Horarios <span class="text-[#2364B0]">CNEL</span>
            </h1>
            <p class="mb-4">
              Ingresa tu identificación para consultar los horarios de cortes de
              luz programados por CNEL en tu área.
            </p>
            <FormSchedule client:load />
          </section>
          <section class="flex flex-col w-full items-center gap-6">
            <h2 class="text-2xl font-semibold">Toma precauciones</h2>
            <div
              class="grid md:grid-cols-5 grid-cols-2 w-full items-center justify-center gap-5"
            >
              {
                cautions.map((caution) => {
                  const IconComponent = getIconComponent(caution.icon);
                  return (
                    <div class="flex flex-col gap-2 items-center  w-full border p-2 rounded-xl bg-card  shadow">
                      {IconComponent && <IconComponent class={caution.class} />}
                      <h5 class="text-center font-medium">{caution.text}</h5>
                    </div>
                  );
                })
              }
            </div>
          </section>
        </div>
      </div>

      <!-- Sección Derecha -->
      <section class="hidden lg:flex justify-end lg:col-span-1 overflow-auto">
      </section>
    </div>
  </div>

  <script is:inline>
    function observeTitle(options = {}) {
      const {
        titleId,
        appBarTitleId,
        cloneMode,
        removeLeadingIcons,
        maxFontSize,
        appBarHeight,
      } = { ...defaultOptions, ...options };

      const title = document.getElementById(titleId);
      const appBarTitle = document.getElementById(appBarTitleId);
      const leadingIcons = document.getElementById("leading-actions");

      if (!title || !appBarTitle || !leadingIcons) return;

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              // Título visible, ocultar el título en el Appbar y mostrar los íconos
              appBarTitle.classList.add("opacity-0");
              appBarTitle.classList.remove("opacity-100");

              if (removeLeadingIcons) {
                leadingIcons.classList.add("opacity-100");
                leadingIcons.classList.remove("opacity-0");
              }
            } else {
              // Limpiar el contenido actual del Appbar
              appBarTitle.innerHTML = "";

              // Obtenemos el tamaño de fuente original del título
              const titleFontSize = parseFloat(
                window.getComputedStyle(title).fontSize
              );

              if (cloneMode === CloneMode.CLONE_NODE) {
                // Clonamos el nodo completo con todo el HTML y atributos
                const clonedTitle = title.cloneNode(true);

                // Remover márgenes y paddings
                clonedTitle.style.margin = "0";
                clonedTitle.style.padding = "0";
                clonedTitle.style.maxWidth = "100%";

                // Solo aplicar el tamaño máximo si es mayor que el actual
                if (titleFontSize > maxFontSize) {
                  clonedTitle.style.fontSize = `${maxFontSize}px`;
                }

                appBarTitle.appendChild(clonedTitle);
              } else if (cloneMode === CloneMode.INNER_HTML) {
                // Copiamos solo el innerHTML
                appBarTitle.innerHTML = title.innerHTML;

                // Solo aplicar el tamaño máximo si es mayor que el actual
                if (titleFontSize > maxFontSize) {
                  appBarTitle.style.fontSize = `${maxFontSize}px`;
                }
              } else if (cloneMode === CloneMode.TEXT_CONTENT) {
                // Copiamos solo el textContent
                appBarTitle.textContent = title.textContent;

                // Solo aplicar el tamaño máximo si es mayor que el actual
                if (titleFontSize > maxFontSize) {
                  appBarTitle.style.fontSize = `${maxFontSize}px`;
                }
              }

              appBarTitle.classList.add("opacity-100");
              appBarTitle.classList.remove("opacity-0");

              if (removeLeadingIcons) {
                leadingIcons.classList.add("opacity-0");
                leadingIcons.classList.remove("opacity-100");
              }
            }
          });
        },
        {
          rootMargin: `-${appBarHeight}px 0px 0px 0px`,
          threshold: 0,
        }
      );

      observer.observe(title);
    }

    document.addEventListener("astro:page-load", async () => {
      // Usamos import dinámico para cargar el módulo solo cuando sea necesario

      // Ejecutar la función observeTitle después de que la página se haya cargado
      observeTitle({
        removeLeadingIcons: false,
      });
    });
  </script>
</MainLayout>
