---
// import "../../styles/blog.css";
// export const getStaticPaths = (async () => {
//   const entries = await contentfulClient.getEntries<BlogPost>({
//     content_type: "blogPost",

//     include: 1,
//   });

//   return entries.items.map((post) => ({
//     params: {
//       postSlug: post.fields.slug,
//     },
//     props: {
//       post: post,
//     },
//   }));
// }) satisfies GetStaticPaths;
export const prerender = false;

Astro.response.headers.set(
  "Cache-Control",
  "s-maxage=600, stale-while-revalidate"
);
Astro.response.headers.set("Vercel-CDN-Cache-Control", "max-age=3600");
Astro.response.headers.set("CDN-Cache-Control", "max-age=600");
import CustomAudioPlayer from "@/components/AudioPlayer";
import ContentBlog from "@/components/ContentBlog.astro";
import ObserveTitle from "@/components/ObserveTitle.astro";
import type { BlogPost } from "@/interfaces/blog-post";
import BlogLayout from "@/layouts/BlogLayout.astro";
import { contentfulClient } from "@/lib/contentful";
import { generateAudioIfNecessary } from "@/lib/elevanlabs";
import { Sparkles } from "lucide-react";
import { marked } from "marked";

const { postSlug } = Astro.params;

const entries = await contentfulClient.getEntries<BlogPost>({
  content_type: "blogPost",
  include: 1,
  "fields.slug": postSlug, // Reemplaza "tu-slug-aqui" con el slug que deseas buscar
});
const post = entries.items[0];
post.fields.summary;
const content = post.fields.contentHtml;
let contentMarkdown: string | Promise<string> = marked.parse(
  post.fields.contentMarkdown ?? ""
);
// const lastUpdatedAt = new Date(post.sys.updatedAt).toISOString();

let audioLink: string | undefined = undefined;
if (post.fields.summaryAi) {
  audioLink = await generateAudioIfNecessary(postSlug!, post.fields.summaryAi);
}
---

<BlogLayout
  title={post.fields.title}
  description={post.fields.summary}
  image={post.fields.featuredImage?.fields.file.url}
  articleDate={post.fields.publishDate}
  class:list={["relative"]}
>
  <section
    class="max-w-4xl mx-auto flex flex-col w-full bg-background dark:bg-[#0a0910] shadow"
  >
    <img
      src={post.fields.featuredImage?.fields.file.url}
      alt={post.fields.title}
      class="w-full h-60 object-cover md:block hidden"
    />
    <div class="p-6 md:p-8 flex flex-col">
      <span class="text-center text-xs mb-4">
        Publicado
        <span class="font-semibold">
          {
            new Intl.DateTimeFormat("es-EC", {
              dateStyle: "medium",
            }).format(new Date(post.fields.publishDate))
          }
          - {post.fields.readingTime} min de lectura
        </span>
      </span>
      <h1 class="text-2xl md:text-3xl font-bold mb-6 text-center">
        {post.fields.title}
      </h1>
      <h1 id="page-title" class="text-xl truncate font-semibold h-0">
        <span class="flex md:hidden">
          {post.fields.title.slice(0, 20)}...
        </span>
        <span class="md:flex hidden">
          {post.fields.title.slice(0, 90)}...
        </span>
      </h1>
      {
        audioLink && (
          <CustomAudioPlayer url={audioLink} client:only="react">
            <div
              slot="fallback"
              class="flex flex-row md:fixed md:bottom-12 md:right-10 w-full md:w-[327px] justify-center items-center  rounded-xl min-h-[2.5rem]  bg-[#171717] text-white mb-2 gap-0 animate-pulse"
            >
              <span class="flex items-center dark:text-white p-2 flex-shrink-0">
                <Sparkles className="mr-2" size={14} />
                Cargando el audio
              </span>
            </div>
          </CustomAudioPlayer>
        )
      }

      <img
        src={post.fields.featuredImage?.fields.file.url}
        alt={post.fields.title}
        class="w-full h-96 object-cover rounded-lg md:hidden block"
      />

      <ContentBlog content={content} contentMarkdown={contentMarkdown} />
    </div>
  </section>

  <ObserveTitle />
</BlogLayout>
